javascript:(function(){window._aicaptured=[];window._aiClickHandler=function(e){e.preventDefault();e.stopPropagation();const el=e.target;el.style.outline='2px solid red';el.style.transition='outline 0.3s ease-in-out';setTimeout(()=>el.style.outline='',1000);const payload={tagName:el.tagName,id:el.id,classList:Array.from(el.classList),text:el.innerText.trim(),outerHTML:el.outerHTML};window._aicaptured.push(payload);console.log("Captured:",payload);};document.addEventListener('click',window._aiClickHandler,true);alert("âœ… AI Inspect ON. Click elements to capture (with highlight).");})();


javascript:(function(){document.removeEventListener('click', window._aiClickHandler, true);alert("ðŸ›‘ AI Inspect OFF.");})();

javascript:(function(){if(!window._aicaptured||window._aicaptured.length===0){alert("âš %EF%B8%8F No elements captured.");return}const t=JSON.stringify(window._aicaptured,null,2);console.log("âœ… Copied captured elements:",t);navigator.clipboard.writeText(t).then(()=>{alert("ðŸ“‹ Copied to clipboard. Paste it in AI XL Monster!")});})();
import fs from 'fs';

export const config: WebdriverIO.Config = {
  // ... your existing config ...

  reporters: [
    ['allure', {
      outputDir: 'allure-results',
      disableWebdriverStepsReporting: true,
      disableWebdriverScreenshotsReporting: false,
    }]
  ],

  onPrepare: function (config, capabilities) {
    const envDetails =
      `Environment=QA\n` +
      `Browser=${capabilities[0].browserName}\n` +
      `Platform=${process.platform}\n` +
      `Node.Version=${process.version}\n`;

    if (!fs.existsSync('./allure-results')) {
      fs.mkdirSync('./allure-results');
    }

    fs.writeFileSync('./allure-results/environment.properties', envDetails);
  },
};
